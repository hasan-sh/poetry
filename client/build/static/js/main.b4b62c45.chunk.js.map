{"version":3,"sources":["firebase.ts","store/poem/index.ts","store/poem/selectedPoemStore.ts","store/settings/index.ts","store/user/index.ts","store/index.ts","components/settings/Settings.tsx","components/buttons/Buttons.tsx","components/addPoem/AddPoem.tsx","components/header/Header.tsx","components/login/Login.tsx","components/poem/Poem.tsx","constants/index.ts","components/poem/PoemContainer.tsx","components/poem/SelectedPoem.tsx","components/poemsList/PoemsList.tsx","components/protected/Protected.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/login/Login.module.css","components/addPoem/AddPoem.module.css","components/header/Header.module.css","components/buttons/Buttons.module.css"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","firestore","storage","PoemStore","_dec","persist","_class","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","createClass","key","get","poems","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","action","_this","_this2","id","find","p","poem","file","Promise","resolve","reject","user","currentUser","console","log","uid","userId","allowedUser","imageName","name","imageSrc","ref","concat","delete","then","catch","e","error","task","put","on","getDownloadURL","collection","doc","update","objectSpread","timestamp","Timestamp","fromMillis","Date","now","set","updateWithBlob","updateText","createContext","SelectedPoemStore","selectedPoemStore_dec","_dec2","selectedPoemStore_class","selectedPoemStore_descriptor","selectedPoemStore_descriptor2","selectedPoemStore_descriptor3","selectedPoemStore_descriptor4","selectedPoem","y","lastSelected","Setting","settings_class","settings_descriptor","settings_descriptor2","value","isRtl","language","UserStore","user_dec","user_class","user_descriptor","user_descriptor2","user_descriptor3","user_descriptor4","loggedIn","anonymous","hydrate","create","localStorage","jsonify","rootContext","RootStore","userStore","poemStore","selectedPoemStore","settings","Settings","rootStore","useContext","useEffect","window","navigator","detectRtl","isRtlLang","setIsRtl","Buttons","_ref","disable","next","back","title","containerClassName","react","className","disabled","onClick","style","color","backgroundColor","Link","to","styles","AddPoem","observer","history","match","_useContext","_useContext$poemStore","addPoem","getPoem","isLoggedIn","_useState","useState","_useState2","slicedToArray","currentImage","setCurrentImage","_useState3","_useState4","setPoem","_useState5","_useState6","setFile","_useState7","_useState8","setError","params","submit","_x","_submit","apply","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","preventDefault","abrupt","sent","push","stop","File","react_default","createElement","form","onSubmit","type","placeholder","onChange","_ref2","target","required","_ref3","author","_ref4","text","width","height","minHeight","background","backgroundSize","htmlFor","accept","files","URL","createObjectURL","buttons_Buttons","buttons","withRouter","props","getSelectedPoem","containerAnimationProps","useSpring","top","from","inLoginRoute","matchPath","path","location","pathname","exact","strict","web","div","container","src","avatar","alt","userName","Login","_useContext$userStore","setAnonymous","isAnonymous","state","loginButton","provider","GoogleAuthProvider","useDeviceLanguage","addScope","setCustomParameters","login_hint","signInWithRedirect","continue","Poem","slideInProps","noHover","delay","Math","round","random","marginLeft","opacity","showContent","poemClicked","_useContext$selectedP","removeSelected","poemContainerTransition","useTransition","enter","leave","poemTextProps","DELAY","canUpdate","Fragment","_e$currentTarget$getB","currentTarget","getBoundingClientRect","scrollY","zIndex","position","poem_Poem","map","item","setTimeout","replace","SelectedPoem","rest","objectWithoutProperties","scrolledTop","transitions","stroke","strokeWidth","fill","d","overflow","poem_PoemContainer","PoemsList","getPoems","length","Protected","Component","component","Route","assign","render","Redirect","Routes","setSelectedPoem","currPoem","setCurrPoem","header_Header","Switch","poemsList_PoemsList","protected_Protected","updateRoute","poem_SelectedPoem","App","updatePoems","setUser","getRedirectResult","errorMessage","message","onAuthStateChanged","displayName","photoURL","onSnapshot","snapshot","forEach","_poem$data","data","document","body","dir","settings_Settings","BrowserRouter","src_Routes","Boolean","hostname","ReactDOM","src_App","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b4b62c45.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: 'my-poetry-app.firebaseapp.com',\n    databaseURL: 'https://my-poetry-app.firebaseio.com',\n    projectId: 'my-poetry-app',\n    storageBucket: 'my-poetry-app.appspot.com',\n    messagingSenderId: '341809310539',\n};\nfirebase.initializeApp(config);\n\n\nexport const auth = firebase.auth;\nexport const firestore = firebase.firestore;\nexport const storage = firebase.storage;","import { action, computed, observable } from 'mobx';\nimport { persist } from 'mobx-persist';\nimport { createContext } from 'react';\nimport { auth, firestore, storage } from '../../firebase';\nimport { Poem, UpdatePoem } from './types';\n\nexport class PoemStore {\n    @persist('list') @observable poems: Poem[] = [];\n\n    @computed\n    get getPoems(): Poem[] {\n        return this.poems;\n    }\n\n    @action\n    updatePoems = (poems: Poem[]) => {\n        this.poems = poems;\n    };\n    @action\n    getPoem = (id: string): Poem | undefined => {\n        const needed = this.poems.find((p) => p.id === id);\n        return needed;\n    };\n    @action\n    addPoem = (poem: Poem, file: File): Promise<boolean> => {\n        return new Promise((resolve, reject) => {\n            const user = auth().currentUser;\n            if (!user) return reject('No user recognized');\n            console.log(user.uid, poem.userId);\n            if (!allowedUser(poem.userId)) return reject('Not allowed user!');\n            if (poem.imageName !== file.name) {\n                if (poem.imageSrc && poem.imageName) {\n                    const oldRef = storage().ref(`photos/${poem.imageName}`);\n                    oldRef\n                        .delete()\n                        .then(() => console.log('removed', poem.imageName))\n                        .catch((e) => {\n                            console.error(e);\n                            reject(false);\n                        });\n                }\n                const ref = storage().ref(`photos/${file.name}`);\n                const task = ref.put(file);\n                task.on('state_changed', null, null, () =>\n                    updateWithBlob(poem, ref, file.name)\n                        .then(() => resolve(true))\n                        .catch((e) => {\n                            console.error(e);\n                            reject(false);\n                        }),\n                );\n                task.catch((e) => {\n                    console.error(e);\n                    reject(false);\n                });\n            } else {\n                updateText(poem)\n                    .then(() => resolve(true))\n                    .catch((e) => {\n                        console.error(e);\n                        reject(false);\n                    });\n            }\n        });\n    };\n\n    @action\n    updatePoem = (poem: UpdatePoem) => {\n        firestore()\n            .collection('/poems')\n            .doc(poem.id)\n            .set({\n                ...poem,\n                timestamp: firestore.Timestamp.fromMillis(Date.now()),\n            });\n    };\n}\n\nexport function allowedUser(userId: string) {\n    const currentUser = auth().currentUser;\n    return currentUser && currentUser.uid === userId;\n}\n\nfunction updateWithBlob(\n    poem: Poem,\n    ref: firebase.storage.Reference,\n    imageName: string,\n) {\n    return ref.getDownloadURL().then((imageSrc) =>\n        poem.id\n            ? firestore()\n                  .collection('/poems')\n                  .doc(poem.id)\n                  .update({\n                      ...poem,\n                      imageSrc,\n                      imageName,\n                      timestamp: firestore.Timestamp.fromMillis(Date.now()),\n                  })\n            : firestore()\n                  .collection('/poems')\n                  .doc()\n                  .set({\n                      ...poem,\n                      imageSrc,\n                      imageName,\n                      timestamp: firestore.Timestamp.fromMillis(Date.now()),\n                  }),\n    );\n}\n\nfunction updateText(poem: Poem) {\n    return poem.id\n        ? firestore()\n              .collection('/poems')\n              .doc(poem.id)\n              .update({\n                  ...poem,\n                  timestamp: firestore.Timestamp.fromMillis(Date.now()),\n              })\n        : firestore()\n              .collection('/poems')\n              .doc()\n              .set({\n                  ...poem,\n                  timestamp: firestore.Timestamp.fromMillis(Date.now()),\n              });\n}\n\nexport const poemContext = createContext(new PoemStore());\n","import { action, computed, observable } from 'mobx';\nimport { persist } from 'mobx-persist';\nimport { Poem } from './types';\n\nexport class SelectedPoemStore {\n    @persist('object') @observable lastSelected: Poem;\n    @persist('object') @observable selectedPoem: Poem;\n\n    @computed\n    get getSelectedPoem(): Poem {\n        return this.selectedPoem;\n    }\n\n    @action\n    removeSelected = () => {\n        this.selectedPoem = null;\n    };\n\n    @action\n    setSelectedPoem = (poem: Poem, y: number) => {\n        this.selectedPoem = {\n            ...poem,\n            y,\n        };\n        this.lastSelected = this.selectedPoem;\n    };\n}\n","import { action, computed, observable } from 'mobx';\nimport { persist } from 'mobx-persist';\n\nexport type Language = string;\nexport type IsRtl = boolean;\n\nexport class Setting {\n    @persist @observable language: Language = 'en';\n    @persist @observable isRtl: IsRtl = false;\n\n\n    @action\n    setIsRtl(isRtl: IsRtl) {\n        this.isRtl = isRtl;\n    }\n\n    @computed\n    get getLanguage() {\n        return this.language;\n    }\n\n    @action\n    setLanguage(language: Language) {\n        this.language = language;\n    }\n}\n","import { action, computed, observable } from 'mobx';\nimport { persist } from 'mobx-persist';\nimport { UserState } from './types';\n\nexport class UserStore {\n    @persist('object') @observable user: UserState;\n    @persist @observable anonymous: boolean = false;\n\n    @computed\n    get isLoggedIn(): boolean {\n        return this.user && this.user.loggedIn;\n    }\n\n    @computed\n    get isAnonymous(): boolean {\n        return this.anonymous;\n    }\n\n    @action\n    setUser = (user: UserState) => {\n        this.user = user;\n    };\n\n    @action\n    setAnonymous = (anonymous: boolean) => {\n        this.anonymous = anonymous;\n    };\n}\n","import { create } from 'mobx-persist';\nimport { createContext } from 'react';\nimport { PoemStore } from './poem';\nimport { SelectedPoemStore } from './poem/selectedPoemStore';\nimport { Setting } from './settings';\nimport { UserStore } from './user';\n\nconst hydrate = create({\n    storage: localStorage,\n    jsonify: true,\n});\n\nexport class RootStore {\n    userStore = new UserStore();\n    poemStore = new PoemStore();\n    selectedPoemStore = new SelectedPoemStore();\n    settings = new Setting();\n\n    constructor() {\n        hydrate('user', this.userStore);\n        hydrate('poem', this.poemStore);\n        hydrate('selectedPoem', this.selectedPoemStore);\n        hydrate('language', this.settings);\n    }\n}\n\nexport const rootContext = createContext(new RootStore());\n","import { useContext, useEffect } from 'react';\nimport detectRtl from 'rtl-detect';\nimport { rootContext } from '../../store';\n\nexport interface SettingsProps {}\n\nconst Settings: React.SFC<SettingsProps> = () => {\n    const rootStore = useContext(rootContext);\n    useEffect(() => {\n        const language = window.navigator.language;\n        const isRtl = detectRtl.isRtlLang(language);\n        rootStore.settings.setIsRtl(isRtl);\n    }, []);\n    return null;\n};\n\nexport default Settings;\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { rootContext } from '../../store';\nimport styles from './Buttons.module.css';\n\nexport interface ButtonsProps {\n    disable: boolean;\n    next(e: React.FormEvent): void;\n    back?(): void;\n    title?: string;\n    containerClassName?: string;\n}\n\nconst Buttons: React.SFC<ButtonsProps> = ({\n    disable,\n    next,\n    back,\n    title,\n    containerClassName,\n}) => {\n    const {\n        settings: { isRtl },\n    } = useContext(rootContext);\n    return (\n        <div className={`buttons ${isRtl ? 'rtl' : ''} ${containerClassName}`}>\n            <button disabled={disable} className=\"btn pink update\" onClick={next}>\n                {title ? title : 'Update'}\n            </button>\n            {back ? (\n                <button\n                    className={`btn back`}\n                    onClick={back}\n                    style={{\n                        color: 'white',\n                        backgroundColor: 'transparent',\n                    }}\n                >\n                    Back\n                </button>\n            ) : (\n                <Link to=\"/\" className={`btn ${styles.back}`}>\n                    Back\n                </Link>\n            )}\n        </div>\n    );\n};\n\nexport default Buttons;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { rootContext } from '../../store';\nimport { Poem } from '../../store/poem/types';\nimport styles from './AddPoem.module.css';\nimport Buttons from '../buttons/Buttons';\n\nexport interface AddPoemProps extends RouteComponentProps {}\n\nconst AddPoem: React.SFC<AddPoemProps> = observer(({ history, match }) => {\n    const {\n        poemStore: { addPoem, getPoem },\n        userStore: { isLoggedIn },\n    } = useContext(rootContext);\n\n    const [currentImage, setCurrentImage] = useState(null);\n    const [poem, setPoem]: [Poem, React.Dispatch<Poem>] = useState({});\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(\n        !isLoggedIn && 'Only logged in users can add poems!',\n    );\n\n    const id = match.params.id || '';\n    useEffect(() => {\n        let poem = {};\n        if (id) {\n            poem = getPoem(id); \n        } \n        setPoem(poem);\n    }, [id]);\n    useEffect(() => {\n        if (!poem.id || !id) return;\n        const file = new File([poem.imageSrc], poem.imageName || 'image.jpg');\n        setFile(file);\n    }, [poem]);\n\n    async function submit(e: React.FormEvent) {\n        e.preventDefault();\n        if (!file) {\n            return setError('Please make sure to choose an image!');\n        }\n        const result = await addPoem(poem, file);\n        if (!result) {\n            console.error(result);\n            setError('Something has gone wrong!');\n        } else {\n            history.push('/poems');\n        }\n    }\n    return (\n        <form className={`container ${styles.form}`} onSubmit={submit}>\n            <b style={{ color: 'white' }}>{error}</b>\n            <input\n                type=\"text\"\n                placeholder=\"Title\"\n                onChange={({ target: { value } }) =>\n                    setPoem({ ...poem, title: value })\n                }\n                value={poem.title || ''}\n                required\n                disabled={!isLoggedIn}\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Author\"\n                onChange={({ target: { value } }) =>\n                    setPoem({ ...poem, author: value })\n                }\n                value={poem.author || ''}\n                required\n                disabled={!isLoggedIn}\n            />\n            <textarea\n                placeholder=\"Poem\"\n                onChange={({ target: { value } }) =>\n                    setPoem({ ...poem, text: value })\n                }\n                value={poem.text || ''}\n                required\n                disabled={!isLoggedIn}\n            />\n            {id && poem && (\n                <div\n                    style={{\n                        width: 200,\n                        height: 200,\n                        minHeight: 50,\n                        background: `url(${currentImage ||\n                            poem.imageSrc || '/images/default.jpg'}) no-repeat center center/contain `,\n                        backgroundSize: 'contain',\n                    }}\n                />\n            )}\n            <label htmlFor=\"image\">\n                Image: {file && file.name}\n                <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    name=\"your image\"\n                    id=\"image\"\n                    onChange={(e) => {\n                        const file = e.target.files[0];\n                        if (!file) return;\n                        setCurrentImage(URL.createObjectURL(file));\n                        setFile(file);\n                    }}\n                    disabled={!isLoggedIn}\n                />\n            </label>\n            \n            <Buttons\n                disable={!isLoggedIn}\n                next={submit}\n                title={!id && 'Add'}\n                containerClassName={styles.buttons}\n            />\n        </form>\n    );\n});\n\nexport default AddPoem;\n","import React, { useContext } from 'react';\nimport { Link, matchPath, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { animated, useSpring } from 'react-spring';\nimport { rootContext } from '../../store';\nimport styles from './Header.module.css';\n\nexport interface HeaderProps extends RouteComponentProps {}\n\nconst Header: React.SFC<HeaderProps> = (props) => {\n    const {\n        userStore: { user },\n        selectedPoemStore: { getSelectedPoem },\n    } = useContext(rootContext);\n    const containerAnimationProps = useSpring({\n        top: getSelectedPoem ? '-100%' : '0%',\n        from: { top: getSelectedPoem ? '0%' : '-100%' },\n    });\n    const inLoginRoute = matchPath('/login', {\n        path: props.location.pathname,\n        exact: true,\n        strict: false,\n    });\n    return (\n        <animated.div\n            style={containerAnimationProps}\n            className={styles.container}\n        >\n            {user ? (\n                <h3>\n                    <img\n                        src={user && user.avatar}\n                        alt=\"user\"\n                        className={styles.avatar}\n                    />\n                    Hello,&nbsp;<i>{user && user.userName}</i>\n                </h3>\n            ) : (\n                <Link className=\"btn\" to={inLoginRoute ? '/poems' : '/login'}>\n                    {inLoginRoute ? 'Poems' : 'Login'}\n                </Link>\n            )}\n            <Link className=\"btn\" to=\"/add\">\n                Add Poem\n            </Link>\n        </animated.div>\n    );\n};\n\nexport default withRouter(Header);\n","import React, { useContext, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { auth } from '../../firebase';\nimport { rootContext } from '../../store';\nimport styles from './Login.module.css';\n\nexport interface LoginProps extends RouteComponentProps {}\n\nconst Login: React.SFC<LoginProps> = (props) => {\n    const {\n        userStore: { isLoggedIn, isAnonymous, setAnonymous },\n    } = useContext(rootContext);\n    useEffect(() => {\n        if (isLoggedIn) {\n            const path =\n                (props.history.location.state &&\n                    props.history.location.state.from.pathname) ||\n                '/';\n            props.history.push(path);\n        }\n    }, [isLoggedIn]);\n    const login = () => {\n        const provider = new auth.GoogleAuthProvider();\n        auth().useDeviceLanguage();\n        provider.addScope('email');\n        provider.addScope('profile');\n        provider.setCustomParameters({\n            login_hint: 'poet@example.com',\n        });\n\n        auth().signInWithRedirect(provider);\n    };\n\n    const continueAnonymously = () => {\n        setAnonymous(true);\n        props.history.push('/poems');\n    };\n\n    return (\n        <div className={styles.container}>\n            <button className={`btn ${styles.loginButton} `} onClick={login}>\n                Login\n            </button>\n            <button\n                className={`btn ${styles.continue}`}\n                onClick={continueAnonymously}\n            >\n                Anonymous\n            </button>\n        </div>\n    );\n};\n\nexport default Login;\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { animated, useSpring } from 'react-spring';\nimport { DELAY } from '../../constants';\nimport { Poem as PoemType } from '../../store/poem/types';\nimport './style.css';\n\nexport interface PoemProps {\n    poem: PoemType;\n    noHover?: boolean;\n}\n\nconst Poem: React.SFC<PoemProps> = observer(({ poem, noHover }) => {\n    const slideInProps = useSpring({\n        delay: DELAY * Math.round(Math.random() + 3),\n        from: {\n            marginLeft: -10,\n            opacity: 0,\n        },\n        marginLeft: 0,\n        opacity: 1,\n    });\n    return (\n        <div className=\"poem\">\n            <animated.div style={slideInProps}>\n                <div className=\"title\">{poem.title}</div>\n                <div className=\"author\">{poem.author}</div>\n            </animated.div>\n        </div>\n    );\n});\n\nexport default Poem;\n","export const HEADERS_HEIGHT = 70;\n\nexport const DELAY = 300;\n","import React, { useContext } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { animated, useSpring, useTransition } from 'react-spring';\nimport { DELAY } from '../../constants';\nimport { makeText } from '../../helpers/makeText';\nimport { rootContext } from '../../store';\nimport { allowedUser } from '../../store/poem';\nimport { Poem as PoemType } from '../../store/poem/types';\nimport Buttons from '../buttons/Buttons';\nimport Poem from './Poem';\nimport './poetryContainer.css';\n\nexport type PoemProps = Partial<RouteComponentProps> & {\n    poem: PoemType;\n    poemClicked(id: string | number, top: number, height: number): void;\n    showContent?: boolean;\n};\nexport interface PoemState {}\n\nconst PoemContainer: React.FC<PoemProps> = ({\n    poem,\n    showContent,\n    poemClicked,\n    history,\n    location,\n}) => {\n    const {\n        settings: { isRtl },\n        selectedPoemStore: { selectedPoem, removeSelected },\n        userStore: { user },\n    } = useContext(rootContext);\n\n    const poemContainerTransition = useTransition(!!selectedPoem, null, {\n        enter: {\n            height: '66.666%',\n            opacity: 1,\n            delay: DELAY,\n        },\n        leave: {\n            height: '0%',\n            opacity: 0,\n            delay: DELAY,\n        },\n        from: {\n            height: '0%',\n            opacity: 0,\n            delay: DELAY,\n        },\n    });\n    const poemTextProps = useSpring({\n        opacity: 1,\n        from: { opacity: 0 },\n        delay: DELAY * 1.5,\n    });\n    const canUpdate = allowedUser((user && user.id) || '');\n\n    const onClick = (e: React.MouseEvent) => {\n        const { top, height } = e.currentTarget.getBoundingClientRect();\n        poemClicked(poem.id, top + window.scrollY, height);\n    };\n    return (\n        <React.Fragment>\n            <div\n                className={`poemContent ${showContent ? '' : 'hover'}`}\n                onClick={onClick}\n            >\n                <div\n                    className=\"wrapper\"\n                    style={{\n                        background: `url(${\n                            poem.imageSrc\n                                ? poem.imageSrc\n                                : '/images/default.jpg'\n                        }) no-repeat center center `,\n                        backgroundSize: 'cover',\n                    }}\n                />\n                <div style={{ zIndex: 4, position: 'relative' }}>\n                    <Poem poem={poem} noHover />\n                    {showContent && (\n                        <React.Fragment>\n                            <div\n                                className={`leftBorder ${\n                                    selectedPoem ? 'show' : 'out'\n                                } ${isRtl ? 'rtl' : ''}`}\n                            />\n                        </React.Fragment>\n                    )}\n                </div>\n            </div>\n            {showContent &&\n                poemContainerTransition.map(\n                    ({ item, props, key }) =>\n                        item && (\n                            <animated.div key={key} style={props}>\n                                <div className=\"poemContainer\">\n                                    <animated.div style={poemTextProps}>\n                                        <div className=\"poemText\">\n                                        {poem.text}\n                                        </div>\n                                        <Buttons\n                                            disable={!canUpdate}\n                                            next={() => {\n                                                location.state = 'update';\n                                                removeSelected();\n                                                setTimeout(\n                                                    () => history.replace(`/update/${poem.id}`),\n                                                    200,\n                                                );\n                                            }}\n                                            back={() => {\n                                                history.push('/');\n                                                setTimeout(removeSelected, 200);\n                                            }} \n                                        />\n                                    </animated.div>\n                                </div>\n                            </animated.div>\n                        ),\n                )}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(PoemContainer);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { animated, useTransition } from 'react-spring';\nimport { rootContext } from '../../store';\nimport { Poem } from '../../store/poem/types';\nimport PoemContainer from '../poem/PoemContainer';\n\nexport type SelectedPoemProps = Partial<RouteComponentProps> & {\n    poem: Poem;\n};\n\nconst SelectedPoem: React.SFC<SelectedPoemProps> = observer(\n    ({ poem, ...rest }) => {\n        const {\n            selectedPoemStore: {\n                getSelectedPoem: selectedPoem,\n                removeSelected,\n                lastSelected,\n            },\n            settings: { isRtl },\n        } = useContext(rootContext);\n        const scrolledTop = window.scrollY;\n        const transitions = useTransition(!!selectedPoem, null, {\n            enter: {\n                height: '100%',\n                width: '100%',\n                zIndex: 5,\n                position: 'absolute',\n                top: scrolledTop,\n            },\n            leave: {\n                height: '33.33%',\n                width: '100%',\n                zIndex: 5,\n                position: 'absolute',\n                top: (lastSelected && lastSelected.y) || 0,\n            },\n            from: {\n                height: '100%',\n                width: '100%',\n                zIndex: 5,\n                position: 'absolute',\n                top: (lastSelected && lastSelected.y) || 0,\n            },\n        });\n        useEffect(() => {\n            if (poem && selectedPoem) rest.history.replace(`/poem/${poem.id}`);\n        }, [selectedPoem, poem]);\n\n        return (\n            <React.Fragment>\n                <svg\n                    className={`exit ${selectedPoem ? 'show' : 'out'} ${\n                        isRtl ? 'rtl' : ''\n                    }`}\n                    style={{ top: scrolledTop + 20 }}\n                    onClick={() => {\n                        rest.history.push('/');\n                        setTimeout(removeSelected, 200);\n                        // removeSelected();\n                    }}\n                >\n                    <path\n                        stroke=\"black\"\n                        strokeWidth=\"4\"\n                        fill=\"none\"\n                        d=\"M6.25,6.25,17.75,17.75\"\n                    />\n                    <path\n                        stroke=\"black\"\n                        strokeWidth=\"4\"\n                        fill=\"none\"\n                        d=\"M6.25,17.75,17.75,6.25\"\n                    />\n                </svg>\n                {/* {selectedPoem && <div className=\"wrapper\" />} */}\n                {transitions.map(({ key, props, item }) => {\n                    return (\n                        item && (\n                            <animated.div\n                                style={{ ...props, overflow: 'auto' }}\n                                key={key}\n                            >\n                                <PoemContainer\n                                    poemClicked={() => null}\n                                    poem={poem || lastSelected}\n                                    showContent\n                                />\n                            </animated.div>\n                        )\n                    );\n                })}\n            </React.Fragment>\n        );\n    },\n);\n\nexport default withRouter(SelectedPoem);\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { rootContext } from '../../store';\nimport PoemContainer from '../poem/PoemContainer';\n\nexport interface PoemsListProps {\n    poemClicked(id: string, top: number, height: number);\n}\n\nconst PoemsList: React.SFC<PoemsListProps> = observer(({ poemClicked }) => {\n    const {\n        poemStore: { getPoems: poems },\n    } = useContext(rootContext);\n    return (\n        <React.Fragment>\n            {poems.length ? (\n                poems.map((p) => (\n                    <React.Fragment key={p.id}>\n                        <PoemContainer poemClicked={poemClicked} poem={p} />\n                    </React.Fragment>\n                ))\n            ) : (\n                <div className=\"poemContent\">No poems yet!</div>\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default PoemsList;\n","import React, { useContext } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\nimport { rootContext } from '../../store';\n\nexport interface ProtectedProps extends RouteProps {}\n\nconst Protected: React.SFC<ProtectedProps> = ({\n    component: Component,\n    ...rest\n}) => {\n    const {\n        userStore: { isLoggedIn, isAnonymous, anonymous },\n    } = useContext(rootContext);\n    return (\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn || isAnonymous ? (\n                    <Component {...props} />\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: '/login',\n                            state: { from: props.location },\n                        }}\n                    />\n                )\n            }\n        />\n    );\n};\n\nexport default Protected;\n","import React, { useContext, useState } from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport AddPoem from './components/addPoem/AddPoem';\nimport Header from './components/header/Header';\nimport Login from './components/login/Login';\nimport SelectedPoem from './components/poem/SelectedPoem';\nimport PoemsList from './components/poemsList/PoemsList';\nimport Protected from './components/protected/Protected';\nimport { rootContext } from './store';\n\nexport interface RoutesProps {}\n\nconst Routes: React.SFC<RoutesProps> = (props) => {\n    const {\n        selectedPoemStore: { setSelectedPoem, selectedPoem },\n        poemStore: { getPoem },\n    } = useContext(rootContext);\n    const [currPoem, setCurrPoem] = useState();\n    function renderSelectedPoem(props: RouteComponentProps) {\n        const poem = getPoem(props.match.params.id);\n        const updateRoute = props.location.state === 'update';\n        if (!poem) return null;\n        if (!selectedPoem && !updateRoute) setSelectedPoem(poem, 0);\n        return null;\n    }\n    const poemClicked = (id: string, top: number) => {\n        const poem = getPoem(id);\n        setSelectedPoem(poem, top);\n        setCurrPoem(poem);\n    };\n    return (\n        <div style={{ height: '100%' }}>\n            <Header />\n            <Switch>\n                <Route\n                    path=\"/\"\n                    exact\n                    render={() => <PoemsList poemClicked={poemClicked} />}\n                />\n                <Protected\n                    path=\"/poems\"\n                    exact\n                    component={() => <PoemsList poemClicked={poemClicked} />}\n                />\n                <Route exact path=\"/poem/:id\" render={renderSelectedPoem} />\n                <Protected path=\"/add\" exact component={AddPoem} />\n                <Protected path=\"/update/:id\" exact component={AddPoem} />\n                <Route path=\"/login\" component={Login} />\n            </Switch>\n            <SelectedPoem poem={currPoem || selectedPoem} />\n        </div>\n    );\n};\n\nexport default Routes;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Settings from './components/settings/Settings';\nimport { auth, firestore } from './firebase';\nimport Routes from './Routes';\nimport { rootContext } from './store';\n\ninterface AppProps {}\n\nconst App: React.FC<AppProps> = observer(() => {\n    const {\n        selectedPoemStore: { selectedPoem },\n        poemStore: { updatePoems },\n        settings: { isRtl },\n        userStore: { setAnonymous, setUser },\n    } = useContext(rootContext);\n\n    useEffect(() => {\n        auth()\n            .getRedirectResult()\n            .catch(function(error) {\n                const errorMessage = error.message;\n                console.error(errorMessage);\n            });\n        auth().onAuthStateChanged((user) => {\n            if (user) {\n                setAnonymous(false);\n                setUser({\n                    id: user.uid,\n                    loggedIn: true,\n                    userName: user.displayName,\n                    avatar: user.photoURL,\n                });\n            } else {\n                setUser(null);\n            }\n        });\n        firestore()\n            .collection('/poems')\n            .onSnapshot((snapshot) => {\n                const poems = [];\n                snapshot.forEach((poem) => {\n                    const {\n                        author,\n                        title,\n                        text,\n                        id,\n                        userId,\n                        timestamp,\n                        imageSrc,\n                        imageName,\n                    } = poem.data();\n                    poems.push({\n                        author,\n                        title,\n                        text,\n                        id: id || poem.id,\n                        userId,\n                        timestamp: timestamp || Date.now(),\n                        imageSrc,\n                        imageName,\n                    });\n                });\n                updatePoems(poems);\n            });\n    }, []);\n\n    useEffect(() => {\n        document.body.style.overflow = selectedPoem ? 'hidden' : 'auto';\n    }, [selectedPoem]);\n\n    return (\n        <div className=\"App\" dir={isRtl ? 'rtl' : 'ltr'}>\n            <Settings />\n            <Router>\n                <Routes />\n            </Router>\n        </div>\n    );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__vNhFF\",\"continue\":\"Login_continue__3VSIx\",\"loginButton\":\"Login_loginButton__x-ZhZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddPoem_form__2Lmhg\",\"buttons\":\"AddPoem_buttons__2t-vF\",\"back\":\"AddPoem_back__SbsJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__3Nogs\",\"avatar\":\"Header_avatar__Y7JYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"back\":\"Buttons_back__1kCYo\"};"],"sourceRoot":""}