// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  poem: (where?: PoemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  poem: (where: PoemWhereUniqueInput) => PoemNullablePromise;
  poems: (args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Poem>;
  poemsConnection: (args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PoemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPoem: (data: PoemCreateInput) => PoemPromise;
  updatePoem: (args: {
    data: PoemUpdateInput;
    where: PoemWhereUniqueInput;
  }) => PoemPromise;
  updateManyPoems: (args: {
    data: PoemUpdateManyMutationInput;
    where?: PoemWhereInput;
  }) => BatchPayloadPromise;
  upsertPoem: (args: {
    where: PoemWhereUniqueInput;
    create: PoemCreateInput;
    update: PoemUpdateInput;
  }) => PoemPromise;
  deletePoem: (where: PoemWhereUniqueInput) => PoemPromise;
  deleteManyPoems: (where?: PoemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  poem: (
    where?: PoemSubscriptionWhereInput
  ) => PoemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Status = "PUBLIC" | "PRIVATE";

export type PoemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "imageSrc_ASC"
  | "imageSrc_DESC"
  | "imageName_ASC"
  | "imageName_DESC"
  | "status_ASC"
  | "status_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "loggedIn_ASC"
  | "loggedIn_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PoemUpdateInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPoemsInput>;
  imageSrc?: Maybe<String>;
  imageName?: Maybe<String>;
  status?: Maybe<Status>;
}

export type PoemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutPoemsInput {
  update: UserUpdateWithoutPoemsDataInput;
  create: UserCreateWithoutPoemsInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  poems_every?: Maybe<PoemWhereInput>;
  poems_some?: Maybe<PoemWhereInput>;
  poems_none?: Maybe<PoemWhereInput>;
  loggedIn?: Maybe<Boolean>;
  loggedIn_not?: Maybe<Boolean>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PoemUpdateManyMutationInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  imageSrc?: Maybe<String>;
  imageName?: Maybe<String>;
  status?: Maybe<Status>;
}

export interface PoemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  imageSrc?: Maybe<String>;
  imageSrc_not?: Maybe<String>;
  imageSrc_in?: Maybe<String[] | String>;
  imageSrc_not_in?: Maybe<String[] | String>;
  imageSrc_lt?: Maybe<String>;
  imageSrc_lte?: Maybe<String>;
  imageSrc_gt?: Maybe<String>;
  imageSrc_gte?: Maybe<String>;
  imageSrc_contains?: Maybe<String>;
  imageSrc_not_contains?: Maybe<String>;
  imageSrc_starts_with?: Maybe<String>;
  imageSrc_not_starts_with?: Maybe<String>;
  imageSrc_ends_with?: Maybe<String>;
  imageSrc_not_ends_with?: Maybe<String>;
  imageName?: Maybe<String>;
  imageName_not?: Maybe<String>;
  imageName_in?: Maybe<String[] | String>;
  imageName_not_in?: Maybe<String[] | String>;
  imageName_lt?: Maybe<String>;
  imageName_lte?: Maybe<String>;
  imageName_gt?: Maybe<String>;
  imageName_gte?: Maybe<String>;
  imageName_contains?: Maybe<String>;
  imageName_not_contains?: Maybe<String>;
  imageName_starts_with?: Maybe<String>;
  imageName_not_starts_with?: Maybe<String>;
  imageName_ends_with?: Maybe<String>;
  imageName_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PoemWhereInput[] | PoemWhereInput>;
  OR?: Maybe<PoemWhereInput[] | PoemWhereInput>;
  NOT?: Maybe<PoemWhereInput[] | PoemWhereInput>;
}

export interface PoemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  text: String;
  author: UserCreateOneWithoutPoemsInput;
  imageSrc: String;
  imageName: String;
  status?: Maybe<Status>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  poems?: Maybe<PoemCreateManyWithoutAuthorInput>;
  loggedIn: Boolean;
  userName: String;
  avatar: String;
  password: String;
}

export interface UserCreateOneWithoutPoemsInput {
  create?: Maybe<UserCreateWithoutPoemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PoemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PoemWhereInput>;
  AND?: Maybe<PoemSubscriptionWhereInput[] | PoemSubscriptionWhereInput>;
  OR?: Maybe<PoemSubscriptionWhereInput[] | PoemSubscriptionWhereInput>;
  NOT?: Maybe<PoemSubscriptionWhereInput[] | PoemSubscriptionWhereInput>;
}

export interface UserCreateWithoutPoemsInput {
  id?: Maybe<ID_Input>;
  email: String;
  loggedIn: Boolean;
  userName: String;
  avatar: String;
  password: String;
}

export interface PoemUpdateManyDataInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  imageSrc?: Maybe<String>;
  imageName?: Maybe<String>;
  status?: Maybe<Status>;
}

export interface PoemUpdateWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput;
  data: PoemUpdateWithoutAuthorDataInput;
}

export interface PoemUpdateManyWithWhereNestedInput {
  where: PoemScalarWhereInput;
  data: PoemUpdateManyDataInput;
}

export interface UserUpdateOneRequiredWithoutPoemsInput {
  create?: Maybe<UserCreateWithoutPoemsInput>;
  update?: Maybe<UserUpdateWithoutPoemsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPoemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PoemUpsertWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput;
  update: PoemUpdateWithoutAuthorDataInput;
  create: PoemCreateWithoutAuthorInput;
}

export interface PoemCreateManyWithoutAuthorInput {
  create?: Maybe<PoemCreateWithoutAuthorInput[] | PoemCreateWithoutAuthorInput>;
  connect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
}

export interface PoemCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  text: String;
  imageSrc: String;
  imageName: String;
  status?: Maybe<Status>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  poems?: Maybe<PoemUpdateManyWithoutAuthorInput>;
  loggedIn?: Maybe<Boolean>;
  userName?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface PoemUpdateManyWithoutAuthorInput {
  create?: Maybe<PoemCreateWithoutAuthorInput[] | PoemCreateWithoutAuthorInput>;
  delete?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  connect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  set?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  disconnect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  update?: Maybe<
    | PoemUpdateWithWhereUniqueWithoutAuthorInput[]
    | PoemUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PoemUpsertWithWhereUniqueWithoutAuthorInput[]
    | PoemUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  updateMany?: Maybe<
    PoemUpdateManyWithWhereNestedInput[] | PoemUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PoemUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  imageSrc?: Maybe<String>;
  imageName?: Maybe<String>;
  status?: Maybe<Status>;
}

export interface PoemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  imageSrc?: Maybe<String>;
  imageSrc_not?: Maybe<String>;
  imageSrc_in?: Maybe<String[] | String>;
  imageSrc_not_in?: Maybe<String[] | String>;
  imageSrc_lt?: Maybe<String>;
  imageSrc_lte?: Maybe<String>;
  imageSrc_gt?: Maybe<String>;
  imageSrc_gte?: Maybe<String>;
  imageSrc_contains?: Maybe<String>;
  imageSrc_not_contains?: Maybe<String>;
  imageSrc_starts_with?: Maybe<String>;
  imageSrc_not_starts_with?: Maybe<String>;
  imageSrc_ends_with?: Maybe<String>;
  imageSrc_not_ends_with?: Maybe<String>;
  imageName?: Maybe<String>;
  imageName_not?: Maybe<String>;
  imageName_in?: Maybe<String[] | String>;
  imageName_not_in?: Maybe<String[] | String>;
  imageName_lt?: Maybe<String>;
  imageName_lte?: Maybe<String>;
  imageName_gt?: Maybe<String>;
  imageName_gte?: Maybe<String>;
  imageName_contains?: Maybe<String>;
  imageName_not_contains?: Maybe<String>;
  imageName_starts_with?: Maybe<String>;
  imageName_not_starts_with?: Maybe<String>;
  imageName_ends_with?: Maybe<String>;
  imageName_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  OR?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  NOT?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  loggedIn?: Maybe<Boolean>;
  userName?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateWithoutPoemsDataInput {
  email?: Maybe<String>;
  loggedIn?: Maybe<Boolean>;
  userName?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  loggedIn: Boolean;
  userName: String;
  avatar: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  loggedIn: () => Promise<Boolean>;
  userName: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  loggedIn: () => Promise<AsyncIterator<Boolean>>;
  userName: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePoem {
  count: Int;
}

export interface AggregatePoemPromise
  extends Promise<AggregatePoem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePoemSubscription
  extends Promise<AsyncIterator<AggregatePoem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  loggedIn: Boolean;
  userName: String;
  avatar: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  poems: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loggedIn: () => Promise<Boolean>;
  userName: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  poems: <T = Promise<AsyncIterator<PoemSubscription>>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loggedIn: () => Promise<AsyncIterator<Boolean>>;
  userName: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  poems: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loggedIn: () => Promise<Boolean>;
  userName: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface Poem {
  id: ID_Output;
  title: String;
  text: String;
  imageSrc: String;
  imageName: String;
  status: Status;
  timestamp: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PoemPromise extends Promise<Poem>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  imageSrc: () => Promise<String>;
  imageName: () => Promise<String>;
  status: () => Promise<Status>;
  timestamp: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PoemSubscription
  extends Promise<AsyncIterator<Poem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  imageSrc: () => Promise<AsyncIterator<String>>;
  imageName: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PoemNullablePromise
  extends Promise<Poem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  imageSrc: () => Promise<String>;
  imageName: () => Promise<String>;
  status: () => Promise<Status>;
  timestamp: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PoemSubscriptionPayload {
  mutation: MutationType;
  node: Poem;
  updatedFields: String[];
  previousValues: PoemPreviousValues;
}

export interface PoemSubscriptionPayloadPromise
  extends Promise<PoemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PoemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PoemPreviousValuesPromise>() => T;
}

export interface PoemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PoemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PoemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PoemPreviousValuesSubscription>() => T;
}

export interface PoemPreviousValues {
  id: ID_Output;
  title: String;
  text: String;
  imageSrc: String;
  imageName: String;
  status: Status;
  timestamp: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PoemPreviousValuesPromise
  extends Promise<PoemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  imageSrc: () => Promise<String>;
  imageName: () => Promise<String>;
  status: () => Promise<Status>;
  timestamp: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PoemPreviousValuesSubscription
  extends Promise<AsyncIterator<PoemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  imageSrc: () => Promise<AsyncIterator<String>>;
  imageName: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PoemConnection {
  pageInfo: PageInfo;
  edges: PoemEdge[];
}

export interface PoemConnectionPromise
  extends Promise<PoemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PoemEdge>>() => T;
  aggregate: <T = AggregatePoemPromise>() => T;
}

export interface PoemConnectionSubscription
  extends Promise<AsyncIterator<PoemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PoemEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePoemSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PoemEdge {
  node: Poem;
  cursor: String;
}

export interface PoemEdgePromise extends Promise<PoemEdge>, Fragmentable {
  node: <T = PoemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PoemEdgeSubscription
  extends Promise<AsyncIterator<PoemEdge>>,
    Fragmentable {
  node: <T = PoemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Poem",
    embedded: false
  },
  {
    name: "Status",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
