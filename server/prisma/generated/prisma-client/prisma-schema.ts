// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePoem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPoem(data: PoemCreateInput!): Poem!
  updatePoem(data: PoemUpdateInput!, where: PoemWhereUniqueInput!): Poem
  updateManyPoems(data: PoemUpdateManyMutationInput!, where: PoemWhereInput): BatchPayload!
  upsertPoem(where: PoemWhereUniqueInput!, create: PoemCreateInput!, update: PoemUpdateInput!): Poem!
  deletePoem(where: PoemWhereUniqueInput!): Poem
  deleteManyPoems(where: PoemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Poem {
  id: ID!
  title: String!
  text: String!
  author: User!
  imageSrc: String!
  imageName: String!
  status: Status!
  timestamp: DateTime!
  updatedAt: DateTime!
}

type PoemConnection {
  pageInfo: PageInfo!
  edges: [PoemEdge]!
  aggregate: AggregatePoem!
}

input PoemCreateInput {
  id: ID
  title: String!
  text: String!
  author: UserCreateOneWithoutPoemsInput!
  imageSrc: String!
  imageName: String!
  status: Status
}

input PoemCreateManyWithoutAuthorInput {
  create: [PoemCreateWithoutAuthorInput!]
  connect: [PoemWhereUniqueInput!]
}

input PoemCreateWithoutAuthorInput {
  id: ID
  title: String!
  text: String!
  imageSrc: String!
  imageName: String!
  status: Status
}

type PoemEdge {
  node: Poem!
  cursor: String!
}

enum PoemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  imageSrc_ASC
  imageSrc_DESC
  imageName_ASC
  imageName_DESC
  status_ASC
  status_DESC
  timestamp_ASC
  timestamp_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PoemPreviousValues {
  id: ID!
  title: String!
  text: String!
  imageSrc: String!
  imageName: String!
  status: Status!
  timestamp: DateTime!
  updatedAt: DateTime!
}

input PoemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  imageSrc: String
  imageSrc_not: String
  imageSrc_in: [String!]
  imageSrc_not_in: [String!]
  imageSrc_lt: String
  imageSrc_lte: String
  imageSrc_gt: String
  imageSrc_gte: String
  imageSrc_contains: String
  imageSrc_not_contains: String
  imageSrc_starts_with: String
  imageSrc_not_starts_with: String
  imageSrc_ends_with: String
  imageSrc_not_ends_with: String
  imageName: String
  imageName_not: String
  imageName_in: [String!]
  imageName_not_in: [String!]
  imageName_lt: String
  imageName_lte: String
  imageName_gt: String
  imageName_gte: String
  imageName_contains: String
  imageName_not_contains: String
  imageName_starts_with: String
  imageName_not_starts_with: String
  imageName_ends_with: String
  imageName_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PoemScalarWhereInput!]
  OR: [PoemScalarWhereInput!]
  NOT: [PoemScalarWhereInput!]
}

type PoemSubscriptionPayload {
  mutation: MutationType!
  node: Poem
  updatedFields: [String!]
  previousValues: PoemPreviousValues
}

input PoemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PoemWhereInput
  AND: [PoemSubscriptionWhereInput!]
  OR: [PoemSubscriptionWhereInput!]
  NOT: [PoemSubscriptionWhereInput!]
}

input PoemUpdateInput {
  title: String
  text: String
  author: UserUpdateOneRequiredWithoutPoemsInput
  imageSrc: String
  imageName: String
  status: Status
}

input PoemUpdateManyDataInput {
  title: String
  text: String
  imageSrc: String
  imageName: String
  status: Status
}

input PoemUpdateManyMutationInput {
  title: String
  text: String
  imageSrc: String
  imageName: String
  status: Status
}

input PoemUpdateManyWithoutAuthorInput {
  create: [PoemCreateWithoutAuthorInput!]
  delete: [PoemWhereUniqueInput!]
  connect: [PoemWhereUniqueInput!]
  set: [PoemWhereUniqueInput!]
  disconnect: [PoemWhereUniqueInput!]
  update: [PoemUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PoemUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PoemScalarWhereInput!]
  updateMany: [PoemUpdateManyWithWhereNestedInput!]
}

input PoemUpdateManyWithWhereNestedInput {
  where: PoemScalarWhereInput!
  data: PoemUpdateManyDataInput!
}

input PoemUpdateWithoutAuthorDataInput {
  title: String
  text: String
  imageSrc: String
  imageName: String
  status: Status
}

input PoemUpdateWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput!
  data: PoemUpdateWithoutAuthorDataInput!
}

input PoemUpsertWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput!
  update: PoemUpdateWithoutAuthorDataInput!
  create: PoemCreateWithoutAuthorInput!
}

input PoemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
  imageSrc: String
  imageSrc_not: String
  imageSrc_in: [String!]
  imageSrc_not_in: [String!]
  imageSrc_lt: String
  imageSrc_lte: String
  imageSrc_gt: String
  imageSrc_gte: String
  imageSrc_contains: String
  imageSrc_not_contains: String
  imageSrc_starts_with: String
  imageSrc_not_starts_with: String
  imageSrc_ends_with: String
  imageSrc_not_ends_with: String
  imageName: String
  imageName_not: String
  imageName_in: [String!]
  imageName_not_in: [String!]
  imageName_lt: String
  imageName_lte: String
  imageName_gt: String
  imageName_gte: String
  imageName_contains: String
  imageName_not_contains: String
  imageName_starts_with: String
  imageName_not_starts_with: String
  imageName_ends_with: String
  imageName_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PoemWhereInput!]
  OR: [PoemWhereInput!]
  NOT: [PoemWhereInput!]
}

input PoemWhereUniqueInput {
  id: ID
}

type Query {
  poem(where: PoemWhereUniqueInput!): Poem
  poems(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poem]!
  poemsConnection(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PoemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Status {
  PUBLIC
  PRIVATE
}

type Subscription {
  poem(where: PoemSubscriptionWhereInput): PoemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  poems(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poem!]
  loggedIn: Boolean!
  userName: String!
  avatar: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  poems: PoemCreateManyWithoutAuthorInput
  loggedIn: Boolean!
  userName: String!
  avatar: String!
  password: String!
}

input UserCreateOneWithoutPoemsInput {
  create: UserCreateWithoutPoemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPoemsInput {
  id: ID
  email: String!
  loggedIn: Boolean!
  userName: String!
  avatar: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  loggedIn_ASC
  loggedIn_DESC
  userName_ASC
  userName_DESC
  avatar_ASC
  avatar_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  loggedIn: Boolean!
  userName: String!
  avatar: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  poems: PoemUpdateManyWithoutAuthorInput
  loggedIn: Boolean
  userName: String
  avatar: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  loggedIn: Boolean
  userName: String
  avatar: String
  password: String
}

input UserUpdateOneRequiredWithoutPoemsInput {
  create: UserCreateWithoutPoemsInput
  update: UserUpdateWithoutPoemsDataInput
  upsert: UserUpsertWithoutPoemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPoemsDataInput {
  email: String
  loggedIn: Boolean
  userName: String
  avatar: String
  password: String
}

input UserUpsertWithoutPoemsInput {
  update: UserUpdateWithoutPoemsDataInput!
  create: UserCreateWithoutPoemsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  poems_every: PoemWhereInput
  poems_some: PoemWhereInput
  poems_none: PoemWhereInput
  loggedIn: Boolean
  loggedIn_not: Boolean
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`